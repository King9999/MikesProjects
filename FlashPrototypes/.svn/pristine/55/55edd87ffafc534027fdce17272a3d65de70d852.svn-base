/* Bomb Stopper is a timed game where the player must stop a bomb from exploding by
typing random codes onscreen.  The more difficult the game, the longer the words will be/
higher target number of correct codes. 

The game gets random words from an XML document.  The number of words collected depends on difficulty level*/

package  
{
	import flash.display.MovieClip;
	import flash.events.KeyboardEvent;
	import flash.ui.Keyboard;
	import flash.events.Event;
	import flash.events.MouseEvent;
	import flash.display.DisplayObject;
	import flash.display.Graphics;
    import flash.display.JointStyle;
    import flash.display.LineScaleMode;
    import flash.display.Shape;
    import flash.display.Sprite;
	import flash.text.TextField;
	import flash.text.TextFormat;
	
	
	public class Main extends MovieClip
	{
		var _timer:Clock;	//the time before bomb detonates. Uses my Clock class from Trick or Treat.
		var _timerText:TextField;
		var _timerFormat:TextFormat;
		var _targetWords:Vector.<String> = new Vector.<String>();	//contains words to win game
		var _randomChar:uint;	//selects random letters based on its ASCII code
		var _wordCount:uint;	//number of words needed to complete level.
		var _currentWord:uint;	//iterator.
		var _wordText:TextField;	//current word
		
		var _difficultyLevel:Vector.<TextField> = new Vector.<TextField>();	//used to select challenge
		
		
		var _bomb:Shape;
		var _fuse:Shape;	//width corresponds to amount of time.
		var _typeField:TextField;	//used to type in words
		
		var _secs:uint = 60;	//clock time
		var _fuseWidth:Number = Number(_secs) * 60;	//60 is frame rate
		var _fuseCounter:Number = _fuseWidth;	//used to decrease fuse and keep consistent size
		
		//HUD text
		var _instructionText:TextField;	//tells player what must be done
		
		//screen manager
		var _screenState:int;	//screen manager
		const MAIN_SCREEN:int = 0;	//used to select difficulty
		const GAME_SCREEN:int = 1;	//gameplay screen
		var _menuCleared:Boolean = false;		//used to eliminate children from main menu

		public function Main() 
		{
			//initialize main screen
			_screenState = MAIN_SCREEN;

			
			//timer information
			_timer = new Clock(_secs);
			
			_timerFormat = new TextFormat();
			_timerFormat.size = 50;
			_timerFormat.bold = true;
			_timerFormat.font = "Calibri";
			
			
			
			_timerText = new TextField();
			_timerText.defaultTextFormat = _timerFormat;
			_timerText.textColor = 0x0000F0;
			_timerText.width = 160;
			_timerText.height = 80;
			_timerText.x = 450;
			_timerText.y = 200;
			
			//display time and append zeroes where necessary
			if (_timer.Seconds() < 10)
			{
				_timerText.text = _timer.Minutes() + ":0" + _timer.Seconds() + ":" + _timer.Milliseconds();
			}
			else
			{
				_timerText.text = _timer.Minutes() + ":" + _timer.Seconds() + ":" + _timer.Milliseconds();
			}
			
			//Text field
			_typeField = new TextField();
			_typeField.type = "input";	//need this to be able to input text
			_typeField.border = true;	//need this to be able to input text
			_typeField.borderColor = 0xFF0000;
			_typeField.textColor = 0x000000;
			_typeField.defaultTextFormat = _timerFormat;
			_typeField.background = true;
			_typeField.backgroundColor = 0xcccccc;
			_typeField.x = 350;
			_typeField.y = 600;
			_typeField.width = 300;
			_typeField.height = 60;
			
			//set up difficulty modes
			_difficultyLevel.push(new TextField());		//subscript 0
			_difficultyLevel.push(new TextField());		//1
			_difficultyLevel.push(new TextField());		//2
			
			//difficulty text setup
			for (var i = 0; i < _difficultyLevel.length; i++)
			{
				_difficultyLevel[i].textColor = 0x0000ff;
				_difficultyLevel[i].defaultTextFormat = _timerFormat;
				_difficultyLevel[i].x = 100;
				_difficultyLevel[i].y = (i * 50) + 150;
				_difficultyLevel[i].width = 160;
				_difficultyLevel[i].height = 60;
				_difficultyLevel[i].selectable = false;
				
				//when player mouses over the text, it will highlight in a different colour
				_difficultyLevel[i].addEventListener(MouseEvent.MOUSE_OVER, onHover);
				
				//game will set up differently depending on what's clicked
				_difficultyLevel[i].addEventListener(MouseEvent.MOUSE_UP, mouseClicked);
				
			}
			
			_difficultyLevel[0].text = "Easy";
			_difficultyLevel[1].text = "Normal";
			_difficultyLevel[2].text = "Hard";
			
			
			//instruction
			_instructionText = new TextField();

			_instructionText.textColor = 0x000000;
			_instructionText.defaultTextFormat = _timerFormat;
			_instructionText.x = 100;
			_instructionText.y = 50;
			_instructionText.width = 800;
			_instructionText.height = 150;
			_instructionText.multiline = true;
			_instructionText.wordWrap = true;
			//_instructionText.text = "Choose a difficulty level";	//displayed on main screen
			/*_instructionText.text = "Type the word you see below." + 
			"Press ENTER when you're done!";*/
			
			//bomb
			_bomb = new Shape();
			_bomb.graphics.beginFill(0xcc0000);
			_bomb.graphics.drawRect(350, 300, 300, 100);
			_bomb.graphics.endFill();
			
			//fuse
			_fuse = new Shape();
			_fuse.graphics.beginFill(0x000000);
			_fuse.graphics.drawRect(630, 340, (_fuseCounter / _fuseWidth) * 120, 20);
			_fuse.graphics.endFill();
			
			//words
			_wordCount = 10;
			_currentWord = 0;
			for (var i = 0; i < _wordCount; i++)
			{
				_targetWords.push(new String());
				
				//generate words of variable length and store them in vector. The generated
				//numbers are ASCII codes 97 to 122, which is a to z.
				var p = 0;
				
				while (p < 5)	//5 = number of letters per word
				{
					_targetWords[i] += String.fromCharCode(Math.floor(Math.random() * 25) + 97);
					p++;
				}
				//trace("Word# " + i + ": " + _targetWords[i]);
				
			}
			
			_wordText = new TextField();
			_wordText.defaultTextFormat = _timerFormat;
			_wordText.text = _targetWords[_currentWord];
			_wordText.textColor = 0x004400;
			_wordText.x = 440;
			_wordText.y = 500;
			_wordText.width = 200;
			_wordText.height = 70;
			

			
			//addChild(_timerText);
			addChild(_instructionText);
			/*addChild(_wordText);
			addChild(_typeField);
			addChild(_fuse);
			addChild(_bomb);*/
			
			
			addEventListener(Event.ENTER_FRAME, onEnterFrame);
			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
		}
		
		function onHover(event:MouseEvent):void
		{
			//changes colour of text when cursor is resting on it
			switch (event.target)
			{
				case _difficultyLevel[0]:
					_difficultyLevel[0].textColor = 0xff0000;
					_difficultyLevel[1].textColor = 0x0000ff;
					_difficultyLevel[2].textColor = 0x0000ff;
					break;
				case _difficultyLevel[1]:
					_difficultyLevel[1].textColor = 0xff0000;
					_difficultyLevel[2].textColor = 0x0000ff;
					_difficultyLevel[0].textColor = 0x0000ff;
					break;
				case _difficultyLevel[2]:
					_difficultyLevel[2].textColor = 0xff0000;
					_difficultyLevel[0].textColor = 0x0000ff;
					_difficultyLevel[1].textColor = 0x0000ff;
					break;
				/*default:
					_difficultyLevel[0].textColor = 0x0000ff;
					_difficultyLevel[1].textColor = 0x0000ff;
					_difficultyLevel[2].textColor = 0x0000ff;
					break;*/
			}
			
			
		}
		
		function mouseClicked(event:MouseEvent):void
		{
			//change screen state
			_screenState = GAME_SCREEN;
		}
		
		public function onKeyDown(event:KeyboardEvent):void
		{
			/*When ENTER is pressed, the game checks what was typed against
			the target word.  If correct, the next word is selected.
			Otherwise, the text box is cleared.*/
			
			switch (event.keyCode)
			{
				case Keyboard.ENTER:
					/* Take what the player entered in the input box and compare
					with the target word.*/
					if (_typeField.text == _wordText.text)
					{
						trace("Correct!");
						//move to next word
						_currentWord++;
						_wordText.text = _targetWords[_currentWord];
					}
					else	//do nothing
					{
						trace("Wrong!");
					}
						
					_typeField.text = "";
			}
		}
		
		function onEnterFrame(event:Event):void
		{
			
			switch (_screenState)
			{
				case MAIN_SCREEN:
				{
					/* On this screen, the player should be able to select a difficulty */
					_instructionText.text = "Choose a difficulty level";
					
					for (var i = 0; i < _difficultyLevel.length; i++)
					{
					
						addChild(_difficultyLevel[i]);
					}
					break;
				}
				case GAME_SCREEN:
				{
					if (!_menuCleared)
					{
						//clear menu screen elements
						for (var i = 0; i < _difficultyLevel.length; i++)
						{
							removeChild(_difficultyLevel[i]);
						}
						_menuCleared = true;
					}
					_instructionText.text = "Type the word you see below." + 
					"Press ENTER when you're done!";
					
					addChild(_timerText);
					addChild(_wordText);
					addChild(_typeField);
					addChild(_fuse);
					addChild(_bomb);
					
					/* Time continually decreases until it reaches 0 or player completes all words. */
					_timer.Countdown();
					
					//decrease fuse to give the player a visual of urgency.
					_fuseCounter--;
					//trace("Fuse Counter: " + _fuseCounter / _fuseWidth * 120);
					
					_fuse.width = (_fuseCounter/ _fuseWidth) * 120;
					_fuse.x += 0.2;	//I increase x so that the fuse stays in place after decreasing width
					
					
					//update timer display
					if (_timer.Seconds() < 10 && _timer.Milliseconds() < 10)
					{
						_timerText.text = _timer.Minutes() + ":0" + _timer.Seconds() + ":0" + _timer.Milliseconds();
					}
					else if (_timer.Seconds() < 10 && _timer.Milliseconds() > 10)
					{
						_timerText.text = _timer.Minutes() + ":0" + _timer.Seconds() + ":" + _timer.Milliseconds();
					}
					else if (_timer.Seconds() > 10 && _timer.Milliseconds() > 10)
					{
						_timerText.text = _timer.Minutes() + ":" + _timer.Seconds() + ":" + _timer.Milliseconds();
					}
					else if (_timer.Seconds() > 10 && _timer.Milliseconds() < 10)
					{
						_timerText.text = _timer.Minutes() + ":" + _timer.Seconds() + ":0" + _timer.Milliseconds();
					}
					break;
				}
			}
		}

	}
	
}
