/* October 2011 
TRICK OR TREAT
A game for Game Prototype Challenge v9
By Haskell (Mike) Murray

This class manages all of the different game components. The main game loop is here.

HOUSES
-At the start of the game, there will be a 50% chance that a house will have candy.
-At each frame, the game will check if a house is empty. If it is, then there's a 0.00002% chance
it'll get restocked.
-Houses normally have 1-10 pieces of candy. Each time a house is stocked, there will be a 10% chance 
that a house will have 20 pieces of candy.

CLOCK
Each game is 3 minutes. This cannot be changed at present.

PLAYER
-The player selects their costume, while the CPU controls the others.
-The AI players always go for the best houses.

*/



package  
{
	import flash.display.MovieClip;
	import flash.events.Event;
	import flash.text.TextField;
	import flash.text.TextFormat;
	import flash.events.KeyboardEvent;
	import flash.ui.Keyboard;
	import flash.display.Sprite;	//used for collision checking.
	
	public class Main extends MovieClip
	{
		
		private var _houseVector:Vector.<House> = new Vector.<House>();
		private var _candyText:Vector.<TextField> = new Vector.<TextField>();
		private var _textFormat:TextFormat;
		private var _clockText:TextField;
		private var _clockFormat:TextFormat;
		
		
		var clock:Clock;
		var selectScreen:SelectScreen;
		
		private var _collectBox:Vector.<Sprite> = new Vector.<Sprite>();
		
		//when houses are emptied, they undergo cooldown before they get a chance
		//to restock again.
		private var _restockTime:Vector.<int> = new Vector.<int>();
		
		//player variables
		var player:Vector.<Player> = new Vector.<Player>();
		private var _yell:Vector.<YellBubble> = new Vector.<YellBubble>();
		private var _yellTimer:Vector.<int> = new Vector.<int>();	//duration of yell
		private var _isYellActive:Vector.<Boolean> = new Vector.<Boolean>();
		
		private var _collectTimer:Vector.<int> = new Vector.<int>;	//used to control the rate of collecting candy
		
		

		public function Main() 
		{
			/*************PLAYER SETUP**************/
			
			player[0] = new Ghost();	//player 1
			player[1] = new Knight();	//player 2
			//player = new Ghost();
			
			//Set P1 & P2 position
			player[0].x = 78;
			player[0].y = 262;
			
			player[1].x = 747;
			player[1].y = 564;
			
			addChild(player[0]);
			addChild(player[1]);
			
			//set up player-used variables
			//yell bubble. Used only at certain points.
			for (var p = 0; p < player.length; p++)
			{
				_yell.push(new YellBubble());
				_yellTimer.push(0);
				_isYellActive.push(false);
				_collectTimer.push(0);
			}
			
			
			
			
			/*************SELECT SCREEN ************/
			
			
			//selectScreen = new SelectScreen();
			//gotoAndStop(1, "Select Screen");
			//addChild(selectScreen);
			//stay on this screen until character is selected
			
			
			
			
			
			/*************CLOCK SETUP ************/
			//set up clock
			clock = new Clock(180);		//3 minutes
			_clockFormat = new TextFormat();
			_clockFormat.size = 50;
			_clockFormat.bold = true;
			_clockFormat.font = "Calibri";
			
			_clockText = new TextField();
			_clockText.textColor = 0xFFFFFF;
			_clockText.defaultTextFormat = _clockFormat;
				
			//text borders
			_clockText.width = 100;
			_clockText.height = 80;
				
			//position the text in the black border
			_clockText.x = stage.stageWidth / 2;
			_clockText.y = 0;
			
			if (clock.GetSeconds() < 10)
			{
				//append a zero in front of the seconds
				_clockText.text = clock.GetMinutes().toString() + ":0" + clock.GetSeconds().toString();
			}
			else
			{
				_clockText.text = clock.GetMinutes().toString() + ":" + clock.GetSeconds().toString();
			}
			
			//display clock
			addChild(_clockText);
			
			/******************HOUSE SETUP ***************/
			
			//Set up each house in the vector.				
			_houseVector.push(house0);
			_houseVector.push(house1);
			_houseVector.push(house2);
			_houseVector.push(house3);
			_houseVector.push(house4);
			_houseVector.push(house5);
			_houseVector.push(house6);
			_houseVector.push(house7);
			_houseVector.push(house8);
			_houseVector.push(house9);
			
			
			
			//text formatting for displaying the candy amounts
			_textFormat = new TextFormat();
			_textFormat.size = 30;
			_textFormat.bold = true;
			_textFormat.font = "Calibri";
			
			
			/*************this massive for loop initializes many things.*************/
			for (var i = 0; i < _houseVector.length; i++)
			{
				//text information
				_candyText[i] = new TextField();
				_candyText[i].textColor = 0xFFFFFF;
				_candyText[i].defaultTextFormat = _textFormat;
				
				//text borders
				_candyText[i].width = 40;
				_candyText[i].height = 40;
				
				//position the text on the house.
				_candyText[i].x = _houseVector[i].x + 52;
				_candyText[i].y = _houseVector[i].y + 15;
			
			
				//Randomly determine which houses start with candy
				var chance:int;
			
				chance = Math.floor(Math.random() * 100) + 1;
				if (chance <= 50)
				{
					_houseVector[i].StockUp();
					_candyText[i].text = _houseVector[i].GetCandyAmount().toString();
					addChild(_candyText[i]);	//draw text only when candy is available
				}
				
				
				//set collision boxes for collecting candy
				_collectBox[i] = new Sprite();
				//_collectBox[i].graphics.beginFill(0xFF0000);
				_collectBox[i].graphics.drawRect( _houseVector[i].x+40, _houseVector[i].y+130, 50, 20);
				//_collectBox[i].graphics.endFill();
				addChild(_collectBox[i]);
				
				//cooldown timer
				_restockTime[i] = 0;
			}
		
			//event listeners
			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKeyDown);
			stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
			addEventListener(Event.ENTER_FRAME, onEnterFrame);
			
		}
		
		public function onKeyDown(event:KeyboardEvent):void
		{
			/******Player 1 Controls********/
			//P1 Walk left
			if (event.keyCode == Keyboard.A)
			{
				
				player[0].SetVelocityX(-3);
			}
				
			//P1 Walk right
			if (event.keyCode == Keyboard.D)
			{
				player[0].SetVelocityX(3);
				
			}
								
			//P1 Walk down
			if (event.keyCode == Keyboard.S)
			{
				
				player[0].SetVelocityY(3);
			}
			
			//P1 Walk up
			if (event.keyCode == Keyboard.W)
			{
				
				player[0].SetVelocityY(-3);
			}
			
			//P2 Action button
			if (event.keyCode == Keyboard.C)
			{
				//perform the player-specific action
				player[0].UseAction();
			}
			
			
			/******Player 2 Controls********/
			//P2 Walk left
			if (event.keyCode == Keyboard.LEFT)
			{
				
				player[1].SetVelocityX(-3);
			}
				
			//P2 Walk right
			if (event.keyCode == Keyboard.RIGHT)
			{
				player[1].SetVelocityX(3);
				
			}
								
			//P2 Walk down
			if (event.keyCode == Keyboard.DOWN)
			{
				
				player[1].SetVelocityY(3);
			}
			
			//P2 Walk up
			if (event.keyCode == Keyboard.UP)
			{
				
				player[1].SetVelocityY(-3);
			}
			
			//P2 Action button
			if (event.keyCode == Keyboard.SPACE)
			{
				//perform the player-specific action
				player[1].UseAction();
			}
		}
		
		/* This function checks when a key is released */
		public function onKeyUp(event:KeyboardEvent):void
		{
			/******Player 1 Controls********/
			if(event.keyCode == Keyboard.A || event.keyCode == Keyboard.D)
			{
				player[0].SetVelocityX(0);
			}
									
			if (event.keyCode == Keyboard.S || event.keyCode == Keyboard.W)
			{
				player[0].SetVelocityY(0);
			}
			
			
			/******Player 2 Controls********/
			if(event.keyCode == Keyboard.LEFT || event.keyCode == Keyboard.RIGHT)
			{
				player[1].SetVelocityX(0);
			}
									
			if (event.keyCode == Keyboard.DOWN || event.keyCode == Keyboard.UP)
			{
				player[1].SetVelocityY(0);
			}
		}
		
		function onEnterFrame(event:Event):void
		{
			/**********adjust all timers**********/
			for (var m = 0; m < player.length; m++)
			{
				_yellTimer[m]--;
				if (_yellTimer[m] < 0)
				{
					_yellTimer[m] = 0;
					if (_isYellActive[m])
					{
						removeChild(_yell[m]);
						_isYellActive[m] = false;
					}
				}
				
				_collectTimer[m]--;
				if (_collectTimer[m] < 0)
				{
					_collectTimer[m] = 0;
				}
				
				/**********update player movement*************/
				player[m].x += player[m].GetVelocityX();
				player[m].y += player[m].GetVelocityY();
			}
			
			
			
			/************ House Restocking **************/
			/*Check if a house will get stocked with candy.  There's a 0.00002% chance this will happen.
			The number is low because the game is checking 60 times a second.  Don't want the houses
			to fill up too quickly.*/
			var chance:Number;
			
			for (var a = 0; a < _houseVector.length; a++)
			{
				//update restock time
				_restockTime[a]--;
				if (_restockTime[a] < 0)
				{
					_restockTime[a] = 0;
				}
				
				if (!_houseVector[a].HasCandy() && _restockTime[a] <= 0)
				{
					chance = Math.floor(Math.random() * 100);
					if (chance <= 0.00002)
					{
						_houseVector[a].StockUp();
						_candyText[a].text = _houseVector[a].GetCandyAmount().toString();
						addChild(_candyText[a]);	//draw text only when candy is available
					}
				}
			}
			
			/**************update the clock*****************/
			if (clock.GetSeconds() < 10)
			{
				//append a zero in front of the seconds
				_clockText.text = clock.GetMinutes().toString() + ":0" + clock.GetSeconds().toString();
			}
			else
			{
				_clockText.text = clock.GetMinutes().toString() + ":" + clock.GetSeconds().toString();
			}
			addChild(_clockText);
			
			
			/************** COLLISION CHECKING**************/
			
			for (var j = 0; j < _houseVector.length; j++)
			{
	
				for (var k = 0; k < player.length; k++)
				{
					//check collision against all houses
					player[k].CollisionCheck(_houseVector[j]);
					
					
					//check if player is standing in front of house. Player must stand in front and stay
					//there to collect candy.
					if (player[k].hitTestObject( _collectBox[j]) && _houseVector[j].HasCandy())
					{
						//player yells "Trick or Treat" and begins collecting candy
						_yell[k].x = player[k].x - 10;
						_yell[k].y = player[k].y - 50;
						addChild(_yell[k]);
						_isYellActive[k] = true;
						_yellTimer[k] = 2;	//0.25 seconds
						
						
						//start collecting candy. This is not instantaneous!
						if (_collectTimer[k] <= 0)
						{
							player[k].AddCandy(player[k].GetCandyTaken());
							_houseVector[j].ReduceCandy(player[k].GetCandyTaken());
							_candyText[j].text = _houseVector[j].GetCandyAmount().toString();
							
							//if there's no more candy, then don't display a number and set cooldown
							if (_houseVector[j].HasCandy())
							{
								addChild(_candyText[j]);
							}
							else
							{
								removeChild(_candyText[j]);
								_restockTime[j] = 300;	//5 seconds of restock time
							}
							
							_collectTimer[k] = 45;		//0.75 seconds
						}
						//trace("House " + j + " touched");
					}
				}
			}
			
			
		}

	}
	
}
