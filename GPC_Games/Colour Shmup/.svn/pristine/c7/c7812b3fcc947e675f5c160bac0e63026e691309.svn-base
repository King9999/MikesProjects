/* Colour Shmup for Game Prototype Challenge v16 by Haskell "Mike" Murray - February 2013
This is a space shooter that involves shooting enemies of a colour opposite the player and avoiding those same enemies.  Enemies of a 
like colour can be absorbed by touching them; doing so fills up a rainbow gauge that is used to devastate everything in sight while invulnerable.*/

package 
{
	import flash.display.MovieClip;
	import flash.events.Event;
	import flash.events.KeyboardEvent;
	import flash.ui.Keyboard;
	import flash.display.DisplayObject;
	import flash.display.Graphics;
	import flash.display.Shape;
	import flash.display.Sprite;
	import flash.text.TextField;
	import flash.text.TextFormat;
	import flash.media.Sound;
	import flash.media.SoundChannel;
	import flash.net.URLRequest;
	import flash.media.SoundTransform;
	
	//set up screen
	[SWF(width = "1024",height = "768", backgroundColor = "#000050", frameRate = "60")]

	public class Main extends MovieClip
	{
		trace ("testing");
		
		const START:uint = 0;	//used to identify the buttons in the vector
		const ABOUT:uint = 1;
		var titleScreen:TitleScreen = new TitleScreen();
		//var aboutScreen:AboutScreen = new AboutScreen();
		
		//title screen elements
		var title1:Title1 = new Title1();
		var title2:Title2 = new Title2();
		var cursor:Cursor = new Cursor();
		
		//text
		var gameTextFormat:TextFormat;
		var gameText:Vector.<TextField>;	//contains "Start" and "About"
		
		//sound variables
		var gameMusic:Sound = new Sound(new URLRequest("Super Aleste - Area 1.mp3"));	//Space Megaforce area 1 music
		var musicChannel:SoundChannel = new SoundChannel();
		var _volume:SoundTransform = new SoundTransform(0.4);	//sets volume to 40%
		//static var clickSound:Sound = new ClickSound();		//used on buttons and tiles
		//static var beep:Sound = new FaceSelect();
		
		//bools for the different screens
		var aboutScreenOn:Boolean = false;	//used to fade the screen in and out.
		static var tileScreenOn:Boolean = false;
		
		public function Main()
		{
			/******TITLE***********/
			title1.x = 350;
			title1.y = 120;
			
			title2.x = 350;
			title2.y = 220;
			
			cursor.x = 350;
			cursor.y = 500;
			
			
			/*****Text*************/
			gameTextFormat = new TextFormat();
			gameTextFormat.size = 50;
			gameTextFormat.bold = true;
			gameTextFormat.font = "Calibri";
			
			gameText = new Vector.<TextField>();
			gameText.push(new TextField());		//Start
			gameText.push(new TextField());		//About
			
			//menu setup
			gameText[START].defaultTextFormat = gameTextFormat;
			gameText[START].text = "Start";
			gameText[START].textColor = 0xFFFFFF;
			gameText[START].width = 160;
			gameText[START].height = 80;
			gameText[START].x = cursor.x + 100;
			gameText[START].y = 500;
			gameText[START].selectable = false;
			
			gameText[ABOUT].defaultTextFormat = gameTextFormat;
			gameText[ABOUT].text = "About";
			gameText[ABOUT].textColor = 0xFFFFFF;
			gameText[ABOUT].width = 160;
			gameText[ABOUT].height = 80;
			gameText[ABOUT].x = cursor.x + 100;
			gameText[ABOUT].y = 560;
			gameText[ABOUT].selectable = false;
			
			
			/******ABOUT WINDOW*************/
			//aboutWindow.x = 300;
			//aboutWindow.y = 100;
			
		
	
			addChild(title1);
			addChild(title2);
			addChild(cursor);
			addChild(gameText[START]);
			addChild(gameText[ABOUT]);
			//add all screens.  By default, they're hidden.
			//addChild(aboutWindow);
//			aboutWindow.visible = false;
//			aboutWindow.alpha = 0;	//will fade in and out.
//			
//			addChild(tileScreen);
//			tileScreen.visible = false;
//			tileScreen.alpha = 0;
//			
//			addChild(settingsScreen);
//			settingsScreen.visible = false;
			//settingsScreen.alpha = 0;
			
			//event listeners
			addEventListener(Event.ENTER_FRAME, onEnterFrame);
			stage.addEventListener(KeyboardEvent.KEY_UP, onKeyUp);
			
			//play music
			//PlayMusic(musicChannel, gameMusic);
			//musicChannel = gameMusic.play(0, 10000);
			//musicChannel.soundTransform = _volume;
			
		}
	
		
		/*Plays music and loops it infinitely. Flash has no built-in way of doing this */
		/*function PlayMusic(channel:SoundChannel, sound:Sound):void
		{
			channel = sound.play();
			channel.soundTransform = _volume;
			channel.addEventListener(Event.SOUND_COMPLETE, Replay);
		}*/
		
		/*function Replay(event:Event):void
		{
			//remove the event listener and start music again.
			PlayMusic(musicChannel, gameMusic);
			SoundChannel(event.target).removeEventListener(event.type, Replay);
		}*/
		
		/* On the title screen, the only thing the keyboard does is move the cursor up and down with W or S, and allow the player to 
		make a selection with Enter. */
		function onKeyUp(event:KeyboardEvent):void
		{
			switch (event.keyCode)
			{
				case Keyboard.S:
					//move cursor down, or back to starting position if it already moved
					if (cursor.y != 560)
					{
						cursor.y = 560;
					}
					else
					{
						cursor.y = 500;
					}
					break;
						
				case Keyboard.W:
					//move cursor up
					if (cursor.y != 500)
					{
						cursor.y = 500;
					}
					else
					{
						cursor.y = 560;
					}
					break;
			}
		}
		
		function onEnterFrame(event:Event):void
		{
			//scale the title.
			//title1.scaleX += 0.03;
			//title1.scaleY += 0.03;
			//if (title1.scaleX > 2)
//			{
//				title1.scaleX = 2;
//			}
//			if (title1.scaleY > 2)
//			{
//				title1.scaleY = 2;
//			}
			
			//fade in/out effect for about screen
			//if (aboutWindowActivated)
//			{
//				aboutWindow.visible = true;
//				aboutWindow.alpha += 0.05;
//				if (aboutWindow.alpha > 1)
//				{
//					aboutWindow.alpha = 1;
//				}
//			}
//			else
//			{
//				aboutWindow.alpha -= 0.05;
//				if (aboutWindow.alpha < 0)
//				{
//					aboutWindow.alpha = 0;
//					aboutWindow.visible = false;
//				}
//			}
			
			//settings screen fade in/out
			/*if (settingsScreenActivated)
			{
				settingsScreen.visible = true;
				settingsScreen.alpha += 0.05;
				if (settingsScreen.alpha > 1)
				{
					settingsScreen.alpha = 1;
				}
			}
			else
			{
				settingsScreen.alpha -= 0.05;
				if (settingsScreen.alpha < 0)
				{
					settingsScreen.alpha = 0;
					settingsScreen.visible = false;
				}
			}*/
			
			//tile screen fade in
			//if (tileScreenActivated)
//			{
//				tileScreen.visible = true;
//				tileScreen.alpha += 0.05;
//				if (tileScreen.alpha > 1)
//				{
//					tileScreen.alpha = 1;
//				}
//			}
			
		}

	}

}