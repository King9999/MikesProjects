/* This is the gameplay screen. From here, the game can be paused and exited back to the title screen. */

package  
{
	import flash.display.MovieClip;
	import flash.display.Stage;
	import flash.events.Event;
	import flash.events.KeyboardEvent;
	import flash.ui.Keyboard;
	import flash.display.DisplayObject;
	import flash.display.Graphics;
	import flash.display.Shape;
	import flash.display.Sprite;
	import flash.text.TextField;
	import flash.text.TextFormat;
	import flash.media.Sound;
	import flash.media.SoundChannel;
	import flash.net.URLRequest;
	import flash.media.SoundTransform;
	
	public class GameScreen extends MovieClip
	{
		var stageRef:Stage;
		
		//UI
		var score:int;
		var level:int;
		var rainbowMeter:RainbowMeter;
		var dmgMeter:DamageMeter;
		var border:MeterBorder;
		var meterLabel:MeterLabel;
		
		//graphics
		var blackBG:BlackBG;
		var starList:Vector.<Star>;
		
		//player.  The colour constants coincide with the keyframes of the Ship movieclip.
		var player:Ship;
		var bulletList:Vector.<ShipBullet> = new Vector.<ShipBullet>();
		var garbageList:Vector.<ShipBullet>;	//used to remove offscreen bullets
		var bulletDestroyed:Vector.<Boolean>;
		var bulletCount:uint;
		const WHITE:uint = 1;
		const RED:uint = 2;
		const BLUE:uint = 3;
		const BLACK:uint = 4;
		var vx:Number;
		var vy:Number;
		var defaultSpeed:Number;
		
		//debug
		var debugText:TextField;
		var debugFormat:TextFormat;

		public function GameScreen(stageRef:Stage) 
		{
			this.stageRef = stageRef;
			
			
			/*****METER SETUP*******/
			rainbowMeter = new RainbowMeter();
			rainbowMeter.x = 700;
			rainbowMeter.y = 700;
			
			dmgMeter = new DamageMeter();
			dmgMeter.x = rainbowMeter.x;
			dmgMeter.y = rainbowMeter.y;
			
			border = new MeterBorder();
			border.x = rainbowMeter.x - 10;
			border.y = rainbowMeter.y - 10;
			
			meterLabel = new MeterLabel();
			meterLabel.x = border.x + 10;
			meterLabel.y = border.y - 20;
			
			/*****GRAPHICS*******/
			blackBG = new BlackBG();		
			starList = new Vector.<Star>();
			
			/*****PLAYER*******/
			player = new Ship();
			player.x = 500;
			player.y = 600;
			player.gotoAndStop(WHITE);
			
			//bulletList = new Vector.<ShipBullet>();
			garbageList = new Vector.<ShipBullet>();
			bulletDestroyed = new Vector.<Boolean>();
			bulletCount = 0;
			
			//movement
			vx = 0;
			vy = 0;
			defaultSpeed = 5;
			
			/*******DEBUG*******/
			debugFormat = new TextFormat();
			debugFormat.size = 20;
			debugFormat.bold = true;
			debugFormat.font = "Fixedsys";
			
			debugText = new TextField();
			debugText.defaultTextFormat = debugFormat;
			debugText.textColor = 0xCCCCFF;
			debugText.width = 160;
			debugText.height = 200;
			debugText.x = 850;
			debugText.y = 50;
			debugText.selectable = false;
			 
			/*****ADD ALL ELEMENTS*****/
			addChild(blackBG);
			//create multiple stars and draw them randomly on the screen.
			for (var i:int = 0; i < 40; i++)
			{
				starList.push(new Star());
			}
			
			for each (var s:Star in starList)
			{
				s.x = Math.random() * stageRef.stageWidth;
				s.y = Math.random() * stageRef.stageHeight;
				addChild(s);
			}
			
			addChild(player);
			addChild(border);
			addChild(meterLabel);
			addChild(dmgMeter);
			addChild(rainbowMeter);
			
			addChild(debugText);
	
			/****EVENT LISTENERS*****/
			addEventListener(Event.ENTER_FRAME, Update);
			stageRef.addEventListener(KeyboardEvent.KEY_UP, getInput);
			stageRef.addEventListener(KeyboardEvent.KEY_DOWN, moveShip);
		}
		
		function getInput(event:KeyboardEvent):void
		{
			switch(event.keyCode)
			{
				case Keyboard.SHIFT:	//pause game
					stageRef.removeEventListener(KeyboardEvent.KEY_UP, getInput);
					stageRef.removeEventListener(KeyboardEvent.KEY_DOWN, moveShip);
					Main.gameScreenOff = false;
					trace ("Closed game screen");
					break;
					
				case Keyboard.A: case Keyboard.D:
					vx = 0;
					break;
				case Keyboard.W: case Keyboard.S:
					vy = 0;
					break;
						//as a test, reduce rainbow meter.
						/*if (rainbowMeter.width < 30)
							rainbowMeter.width = 0;
						else
							rainbowMeter.width -= 30;*/
			}
		}
		
		function moveShip(event:KeyboardEvent):void
		{
			switch(event.keyCode)
			{
				case Keyboard.A:	//move ship left
					vx = -defaultSpeed;
					break;
				case Keyboard.D:
					vx = defaultSpeed;
					break;
				case Keyboard.W:
					vy = -defaultSpeed;
					break;
				case Keyboard.S:
					vy = defaultSpeed;
					break;
				case Keyboard.SPACE:	//fire bullets. Can hold down
					bulletList.push(new ShipBullet());
					bulletList[bulletCount].x = player.x;
					bulletList[bulletCount].y = player.y - 40;
					addChild(bulletList[bulletCount]);
					bulletCount++;
					//bulletDestroyed.push(false);
					break;
			}
		}
		
		function UpdateDebug()
		{
			debugText.text = "Bullets: " + bulletCount + "\n";
		}
		
		function Update(event:Event):void
		{
			//update each star's movement.  If they go off-screen, they are repositioned at the top of the screen.
			for each (var star:Star in starList)
			{
				star.y++;
				if (star.y > stageRef.stageHeight)
				{
					star.y = -10;
				}
			}
			
			//update rainbow meter.
			if (dmgMeter.width > rainbowMeter.width)
			{
				dmgMeter.width -= 0.5;
			}
				
			//update player movement
			player.x += vx;
			player.y += vy;
			
			//update bullets
			
			var i:uint = 0;
			
			//bulletList.reverse();
			for each(var b:ShipBullet in bulletList)
			{
				b.y -= defaultSpeed * 1.5;
				if (b.y < 0)
				{
					//destroy bullet
					//garbageList.push(b);
					
					//bulletDestroyed[i] = true;
					try
					{
						removeChild(bulletList[i]);
						bulletList.shift();			//deletes first element in vector.
						trace ("bullet destroyed");
					}
					catch (err:Error)
					{
						trace ("Unable to remove child!");
					}
					//bulletList[i].pop();				
					bulletCount--;
					
				}
				i++;
			}
			
			
			
			//eliminiate offscreen bullets
			//var i:uint = 0;
			/*while (garbageList.length > 0)
			{
				bulletList.pop();
				//removeChild(bulletList[garbageList.length - 1]);
				garbageList.pop();
				
			}*/
			/*for each (var b:ShipBullet in garbageList)
			{
				//garbageList.pop();
				//removeChild(b);
				bulletList.pop();
				i++;
				bulletCount--;
				trace ("bullet destroyed");
			}*/
			
			//debug
			UpdateDebug();
		}

	}
	
}
