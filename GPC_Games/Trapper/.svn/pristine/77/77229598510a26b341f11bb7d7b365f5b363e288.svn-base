/* This is the gameplay screen. From here, the game can be paused and exited back to the title screen. */

package  
{
	import flash.display.MovieClip;
	import flash.display.Stage;
	import flash.events.Event;
	import flash.events.KeyboardEvent;
	import flash.ui.Keyboard;
	import flash.display.DisplayObject;
	import flash.display.Graphics;
	import flash.display.Shape;
	import flash.display.Sprite;
	import flash.text.TextField;
	import flash.text.TextFormat;
	import flash.media.Sound;
	import flash.media.SoundChannel;
	import flash.net.URLRequest;
	import flash.media.SoundTransform;
	import flash.geom.Point;
	import flash.display.BitmapData;
	import flash.display.Bitmap;
	
	public class GameScreen extends MovieClip
	{
		var stageRef:Stage;
		
		//UI & game states
		var score:int;
		var level:int;
		var enemyCount:uint;		//current # of uncaptured creatures remaining.
		var enemyTotal:uint;		//total number of creatures in the level.
		var livesText:TextField;
		var enemyCountText:TextField;		//tracks how many enemies must be killed.
		var uiTextFormat:TextFormat;
		var gameOver:Boolean;
		
		
				
		//sound variables
		/*var musicPlayer:MusicPlayer;
		const PLAY:uint = 1;			//correspond to the frames used to play and stop music.
		const STOP:uint = 2;*/
		
		//player.  
		var player:Player;
		var vx:Number;
		var vy:Number;				//movement
		var defaultSpeed:Number;
		var speedMod:Number;		//adjusts bullet and player speed.
		var playerLives:int;
		var playerIcon:Player;
		
		
		//enemy
		/*var red:Enemy = new Enemy(new Point(50, 180), new Point(200, 200), 100, 40, RED);
		var blue:Enemy = new EnemyBlue(new Point(100, 260), new Point(200, 200), 100, 40, BLUE);
		var black:Enemy = new EnemyBlack(new Point(200, 340), new Point(200, 200), 100, 40, BLACK);
		var white:Enemy = new EnemyWhite(new Point(150, 420), new Point(200, 200), 100, 40, WHITE);*/
		
		
		//debug
		var debugText:TextField;
		var debugFormat:TextFormat;
		
		//music
		var gameMusic:Sound = new Sound(new URLRequest("Super Aleste - Area 1.mp3"));	//Space Megaforce area 1 music
		var musicChannel:SoundChannel = new SoundChannel();
		var _volume:SoundTransform = new SoundTransform(0.5);	//sets volume to 50%*/
		

		public function GameScreen(stageRef:Stage) 
		{
			this.stageRef = stageRef;
			
			//******VARIABLE INITIALIZATION GOES HERE********//
			
			
			
			/**********TEXT SETUP. Change values as necessary*******************/
			uiTextFormat = new TextFormat();
			uiTextFormat.size = 30;
			uiTextFormat.bold = true;
			uiTextFormat.font = "Calibri";
			
			livesText = new TextField();
			livesText.defaultTextFormat = uiTextFormat;
			livesText.textColor = 0xCCCCFF;
			livesText.width = 70;
			livesText.height = 40;
			livesText.x = 80;
			livesText.y = 695;
			livesText.text = "x " + playerLives;
			livesText.selectable = false;
			
			enemyCountText = new TextField();
			enemyCountText.defaultTextFormat = uiTextFormat;
			enemyCountText.textColor = 0xCCCCFF;
			enemyCountText.width = 220;
			enemyCountText.height = 80;
			enemyCountText.x = 50;
			enemyCountText.y = 30;
			enemyCountText.text = "";	//change this as necessary
			enemyCountText.selectable = false;
			
			/*******DEBUG*******/
			debugFormat = new TextFormat();
			debugFormat.size = 20;
			debugFormat.bold = true;
			debugFormat.font = "Fixedsys";
			
			debugText = new TextField();
			debugText.defaultTextFormat = debugFormat;
			debugText.textColor = 0xCCCCFF;
			debugText.width = 220;
			debugText.height = 200;
			debugText.x = 800;
			debugText.y = 50;
			debugText.selectable = false;
			 
			/*****ADD ALL CHILD LEMENTS HERE*****/
			
			
			addChild(debugText);
	
			/****EVENT LISTENERS*****/
			addEventListener(Event.ENTER_FRAME, Update);
			stageRef.addEventListener(KeyboardEvent.KEY_UP, getInput);
			
			/*******play music***********/
			//musicPlayer = new MusicPlayer();
//			musicPlayer.gotoAndStop(PLAY);
			PlayMusic(musicChannel, gameMusic);
			
		}
		
		

		function PlayMusic(channel:SoundChannel, sound:Sound):void
		{
			channel = sound.play();
			channel.soundTransform = _volume;
			channel.addEventListener(Event.SOUND_COMPLETE, Replay);
		}
		
		function Replay(event:Event):void
		{
			//remove the event listener and start music again.
			PlayMusic(musicChannel, gameMusic);
			SoundChannel(event.target).removeEventListener(event.type, Replay);
		}
		
		
		function getInput(event:KeyboardEvent):void
		{
			/* Listen for keyboard input and perform action based on which key is pressed. */
		}
		
		
		function UpdateDebug()
		{
			/* Update debug data in here. This function must go in the update loop. */
			
		}
		
		
		function ResetGame()
		{
			/* All variables and containers are reset to default in here.*/
			
		}
		

		
		function Update(event:Event):void
		{
			/* Game loop typically ends when a terminating condition is met. Until that happens, everything that isn't an onscreen image
			gets updated here.  Collision checking must be performed here. */
			if (!gameOver)
			{
				
				/*******Player movement*******/
				
				
				/************Collision Check***********/
				
					
				
		
				
				/**********debug**********/
				UpdateDebug();
			}	
			else	
			{
				/* If terminating condition is met, the result goes here. */
			}
		}//end Update()

	}
	
}
